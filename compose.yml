services:
  reverse-proxy:
    restart: unless-stopped
    image: traefik:v2.10
    networks:
      - backend
    command:
      - "--entrypoints.web.address=:80"
      - "--providers.docker"
    depends_on:
      - backend
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  backend:
    restart: always
    build: ./backend
    depends_on:
      - database
    networks:
      - backend
    volumes:
      - ${PWD}/backend/srv:/srv
      - user-data:/var/data/user-data
      - app-data:/var/data/app-data
      - mlruns-data:/mlruns
    env_file: .env
    environment:
      - MLFLOW_AUTH_CONFIG_PATH=/srv/auth_config.ini
    expose:
      - 5000
    labels:
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && !PathPrefix(`/signup`)"
      - "traefik.http.middlewares.limit.buffering.maxRequestBodyBytes=12884901888"
      - "traefik.http.middlewares.limit.buffering.memRequestBodyBytes=10485760"
      - "traefik.http.middlewares.limit.buffering.maxResponseBodyBytes=12884901888"
      - "traefik.http.middlewares.limit.buffering.memResponseBodyBytes=10485760"

  database:
    image: postgres:latest
    restart: always
    user: postgres
    volumes:
      - app-data:/var/lib/postgresql/data
    env_file: .env
    environment:
      - POSTGRES_DB=${DATABASE_NAME:?DATABASE_NAME is not set}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:?DATABASE_PASSWORD is not set}
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  backup_db:
    restart: always
    build: ./backup_db
    init: true
    command: ["sh", "-c", "service cron start && tail -f /var/log/cron.log"]
    depends_on:
      - database
    volumes:
      - backup_db:/backup_files
      - user-data:/var/data/user-data
      - app-data:/var/data/app-data
    env_file: .env
    environment:
      - POSTGRES_DB=${DATABASE_NAME:?DATABASE_NAME is not set}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:?DATABASE_PASSWORD is not set}
      - POSTGRES_HOST=${DATABASE_HOST:?DATABASE_HOST is not set}
      - POSTGRES_PORT=${DATABASE_PORT:?DATABASE_PORT is not set}
      - POSTGRES_USER="postgres"
    networks:
      - backend
    entrypoint: ["/srv/entrypoint.sh"]
    healthcheck:
      test: ["CMD", "bash"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  backend:

volumes:
  user-data:
  app-data:
  mlruns-data:
  backup_db: